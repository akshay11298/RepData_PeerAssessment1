rm()
rm(chic.f)
rm(chicago)
rm(data)
dat <- read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv")
names(dat)
ag.dat<- filter(dat, AGS=6 & ACR=3 )
ag.dat<- filter(dat, AGS==6 & ACR==3 )
head(ag.data)
head(ag.dat)
which(ag.dat)
which(dat$ACR=3 )
which(dat$ACR==3 )
which(dat$ACR==3 & dat$AGS==6 )
rm(ag,dat)
rm(ag.dat)
library(jpeg)
install.packages("jpeg")
library(jpeg)
pic <- readJPEG("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg ")
pic <- readJPEG("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg ", native = T)
pic <- readJPEG("http://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg ", native = T)
pic <- readJPEG(url("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg "), native = T)
pic <- readJPEG(source("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg "), native = T)
z <- tempfile()
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg ",z,mode = wb)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg ",z,mode = "wb")
pic <-readJPEG(z)
file.remove(z)
pic <-readJPEG(pic,native = T)
pic <-readJPEG(z,native = T)
z <- tempfile()
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg ",z,mode = "wb")
pic <-readJPEG(z,native = T)
quantile(pic)
quantile(pic,10)
quantile(pic,0.1)
quantile(pic,0.3)
quantile(pic,0.8)
gdp <- read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv")
edu<-read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv")
head(edu)
head(gdp)
head(edu)
head(gdp)
gdp[1]
gdp[2]
gdp[[1]
]
edu[[1]]
match <- intersect(gdp[[1]],edu[[1]])
summarise(match)
match
gdp<-arrange(gdp,rank)
gdp<-arrange(gdp,.(rank)
)
head
head(gdp)
gdp<-arrange(gdp,Ranking)
gdp<-arrange(gdp,gdp$Ranking)
summarise(gdp)
gdp<-data.frame(gdp)
summarise(gdp)
gdp[[1]]
gdp[X.1]
gdp["X.1"]
gdp["Ranking"]
names(gdp)
gdp["Gross.domestic.product.2012"]
gdp["Gross.domestic.product.2012",2]
gdp["Gross.domestic.product.2012",1]
gdp["Gross.domestic.product.2012",]
head(gdp)
gdp["X.3"]
gdp<-gdp[5:330]
gdp[,5:330]
gdp[,5]
gdp[5:30]
gdp[5]
gdp[,5]
gdp[[1]][[3]]
gdp[[1]][[4]]
gdp[,5]
l <-as.list(gdp)
l
head
head(l)
head(l,n=3)
l[,5]
l[5]
rm(l)
df<-as.data.frame(gdp)
df[5:1-]
df[5]
df[,5]
gdp <- data.table::fread(gdp
, skip=4
, nrows = 190
, select = c(1, 2, 4, 5)
, col.names=c("CountryCode", "Rank", "Economy", "Total")
)
gdp <- data.table::fread('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv'
, skip=4
, nrows = 190
, select = c(1, 2, 4, 5)
, col.names=c("CountryCode", "Rank", "Economy", "Total")
)
library(data.table)
gdp <- data.table::fread('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv'
, skip=4
, nrows = 190
, select = c(1, 2, 4, 5)
, col.names=c("CountryCode", "Rank", "Economy", "Total")
)
rm(df)
gdp <- data.table::fread('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv'
, skip=4
, nrows = 190
, select = c(1, 2, 4, 5)
, col.names=c("CountryCode", "Rank", "Economy", "Total")
)
edu <- data.table::fread('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv'
)
mergeDT<-merge(edu,gdp,by="CountryCode")
summarise(mergeDT)
table(mergeDT)
nrow(mergeDT)
mergedDT[order(-Rank)][13,.(Economy)]
mergeDT[order(-Rank)][13,.(Economy)]
gdp
edu
mergeDT
breaks <- quantile(mergedDT[, Rank], probs = seq(0, 1, 0.2), na.rm = TRUE)
mergedDT$quantileGDP <- cut(mergedDT[, Rank], breaks = breaks)
mergedDT[`Income Group` == "Lower middle income", .N, by = c("Income Group", "quantileGDP")]
breaks <- quantile(mergedT[, Rank], probs = seq(0, 1, 0.2), na.rm = TRUE)
mergeDT$quantileGDP <- cut(mergedT[, Rank], breaks = breaks)
mergeDT[`Income Group` == "Lower middle income", .N, by = c("Income Group", "quantileGDP")]
breaks <- quantile(mergeDT[, Rank], probs = seq(0, 1, 0.2), na.rm = TRUE)
mergeDT$quantileGDP <- cut(mergeDT[, Rank], breaks = breaks)
mergeDT[`Income Group` == "Lower middle income", .N, by = c("Income Group", "quantileGDP")]
hist(c(1,2,3,4,5,10,5,6))
hist(c(1,2,3,4,5,10,5,6),breaks = 10)
hist(c(1,2,3,4,5,10,5,6),breaks = 100)
hist(c(1,2,3,4,5,10,5,6),breaks = 10)
hist(c(1,2,3,4,5,10,5,6),breaks = 20)
hist(c(1,2,3,4,5,10,5,6),breaks = 10)
boxplot(c(1,2,3,4,5,10,5,6))
boxplot(c(1,2,3,4,5,10,5,6),h=6)
boxplot(c(1,2,3,4,5,10,5,6),ah=6)
abline(h=5)
library(datasets)
data(cars)
with(cars,plot(speed,dist))
install.packages("lattice")
library(lattice)
install.packages("ggplot2")
library(swirl)
swirl
swirl()
cnames <- strsplit(cnames, '|', T)
names(pm0)<- make.names(pm0[[1]][wcol])
names(pm0)
names(pm0)<- make.names(cnames[[1]][wcol])
names(pm0)
names(pm1)<- make.names(cnames[[1]][wcol])
dates <- pm1$Date
str(dates)
as.Date(as.character(dates),"%Y%m%d")
dates <- as.Date(as.character(dates),"%Y%m%d")
head(dates)
hist(dates[negative],"month")
install.packages("kernlab")
data(spam)
library(kernlab)
data(spam)
set.seed(3435)
trainIndicator <- rbinom(4601,size = 1,prob = 0.5)
table(trainIndicator)
trainSpam <- spam[trainIndicator==1,]
testSpam <- spam[trainIndicator==0,]
summary(trainSpam)
head(trainSpam)
table(trainSpam$type)
plot(trainSpam$capitalAve~ trainSpma$type)
plot(trainSpam$capitalAve~ trainSpam$type)
plot(log10(trainSpam[,1:4]+1))
names(trainSpam)
names(trainSpam)[1]
names(trainSpam)[55]
?reformulate
library(boot)
?glm
?cv.glm
costFunction <- function(x,y) sum(x!=(y>0.5))
cvError <- rep(1:58)
for(i in 1:58){
lmformula<-reformulate(names(trainSpam)[i],response = "numType")
glmfit= glm(lmformula,family = "binomial",data=trainSpam)
cvError[i]=cv.glm(trainSpam,glmfit = glmfit,costFunction,2)$delta[2]
}
trainSpam$numType = as.numeric(trainSpam$type)-1
for(i in 1:58){
lmformula<-reformulate(names(trainSpam)[i],response = "numType")
glmfit= glm(lmformula,family = "binomial",data=trainSpam)
cvError[i]=cv.glm(trainSpam,glmfit = glmfit,costFunction,2)$delta[2]
}
warning()
warnings()
trainSpam$numType = as.numeric(trainSpam$type)-1
> for(i in 1:58){
lmformula=reformulate(names(trainSpam)[i],response = "numType")
glmfit= glm(lmformula,family = "binomial",data=trainSpam)
cvError[i]=cv.glm(trainSpam,glmfit = glmfit,costFunction,2)$delta[2]
}
trainSpam$numType = as.numeric(trainSpam$type)-1
for(i in 1:58){
lmformula=reformulate(names(trainSpam)[i],response = "numType")
glmfit= glm(lmformula,family = "binomial",data=trainSpam)
cvError[i]=cv.glm(trainSpam,glmfit = glmfit,costFunction,2)$delta[2]
}
names(trainSpam)[which.min(cvError)]
library(knitr)
install.packages("knitr")
?knitr
??knitr
library(knitr)
install.packages("xtable")
setwd("~/Desktop/R/Reproducible Research/RepData_PeerAssessment1")
data <- read.csv("activity.csv")
aggregate(data$steps,by=data$date,FUN=sum,na.rm=T)
aggregate(data$steps,by=c(data$date),FUN=sum,na.rm=T)
aggregate(data$steps,by=list(data$date),FUN=sum,na.rm=T)
totalSteps <- aggregate(data$steps,by=list(data$date),FUN=sum,na.rm=T)
hist(totalSteps$x)
hist(totalSteps$x,breaks = 20)
hist(totalSteps$x,breaks = 25)
hist(totalSteps$x,breaks = 20)
hist(totalSteps$x,breaks = 30)
hist(totalSteps$x,breaks = 10)
hist(totalSteps$x,breaks = 15)
hist(totalSteps$x,breaks = 20)
qplot(totalSteps$x,breaks = 20)
library(ggplot2)
qplot(totalSteps$x,breaks = 20)
qplot(totalSteps$x)
hist(totalSteps$x,breaks = 20)
totalSteps <- aggregate(data$steps,by=list(data$date),na.rm=T,FUN=sum)
mean_value <- round(mean(totalSteps$x),1)
median_value <- round(median(totalSteps$x),1)
hist(totalSteps$x,
main = "Total Number of Steps Taken Per Day",
breaks = 20,
xlab = "Total Number of Steps")
abline(v=mean_value,lwd=2,col="blue")
abline(v=median_value,lwd=2,col="red")
legend('topright', lty = 1, lwd = 3, col = c("blue", "red"),
cex = .8,
legend = c(paste('Mean: ', mean_value),
paste('Median: ', median_value))
)
totalSteps <- aggregate(data$steps,by=list(data$date,data$interval),FUN=sum,na.rm=T)
totalSteps <- aggregate(data$steps,by=list(data$date),FUN=sum,na.rm=T)
avgSteps <- aggregate(data$steps,by=list(data$interval),FUN=mean,na.rm=T)
View(avgSteps)
plot(avgSteps$Group.1,avgSteps$x)
plot(avgSteps$Group.1,avgSteps$x,type = "l")
which.max(avgSteps$x)
avgSteps[104]
avgSteps[104,]
maxSteps <- avgSteps[which.max(avgSteps$x),]
points(maxSteps)
points(maxSteps,col="red",lwd=3,pch=19)
points(maxSteps,col="red",lwd=2,pch=19)
plot(avgSteps$Group.1,
xlab = "Time Interval",
ylab = "Average Number of Steps taken",
main = "Average Steps By Time Interval",
avgSteps$x,type = "l")
points(maxSteps,col="red",lwd=2,pch=19)
points(maxSteps,col="red",lwd=2,pch=18)
plot(avgSteps$Group.1,
xlab = "Time Interval",
ylab = "Average Number of Steps taken",
main = "Average Steps By Time Interval",
avgSteps$x,type = "l")
points(maxSteps,col="red",lwd=2,pch=18)
legend("topright",pch = 18, lwd = 2,col = "blue",legend = paste("Max Value = ",maxSteps$x))
legend("topright",pch = 18,lty=0, lwd = 2,col = "blue",legend = paste("Max Value = ",round(maxSteps$x,1))
)
meanSteps <- aggregate(data$steps,by=list(data$date),mean)
meanSteps <- aggregate(data$steps,by=list(data$date),mean,na.rm=T)
names(meanSteps) <- c("date",
"meanSteps")
dataD <- merge(data,meanSteps,by="date")
View(dataD)
meanSteps <- aggregate(data$steps,by=list(data$date),mean,na.rm=T)
table(meanSteps$x)
View(meanSteps)
rm(dataD)
View(data)
names(meanSteps) <- c("date",
"meanSteps")
View(meanSteps)
dataD <- merge(data,meanSteps,by="date")
View(dataD)
sum(is.na(dataD$meanSteps))
data <- dataD
rm(dataD)
plot(data$steps ~ data$interval)
plot(data$steps ~ data$interval,type="l")
sumByInterval <- aggregate(data$steps,by=list(data$date),sum)
plot(sumByInterval)
plot(sumByInterval,typ="l")
plot(sumByInterval,type="l")
plot(sumByInterval,type="l")
sumByInterval <- aggregate(data$steps,by=list(data$interval),sum)
plot(sumByInterval,type="l")
sumByInterval <- aggregate(data$steps,by=list(data$interval),sum,na.rm=T)
plot(sumByInterval,type="l")
sumByInterval <- aggregate(data$steps,by=list(data$interval),mean,na.rm=T)
plot(sumByInterval,type="l")
sumByInterval <- aggregate(data$steps,by=list(data$date),mean,na.rm=T)
plot(sumByInterval,type="l")
plot(sumByInterval)
fill_na <- function(a,b){
if(is.na(a))
b
else
a
}
lapply(data$steps,fill_na,data$steps,data$meanSteps)
fill_na <- function(a,b){
if(is.na(a)){
return b
}
else
return a
}
fill_na <- function(a,b){
if(is.na(a))
return b
else
return a
}
fill_na <- function(a,b){
if(is.na(a))
b
else
a
}
View(fill_na)
fill_na(1,2)
fill_na(na,2)
fill_na("NA",2)
fill_na(NaN,2)
d <- lapply(data$steps,fill_na,data$steps,data$meanSteps)
d <- lapply(data$steps,fill_na,a=data$steps,b=data$meanSteps)
d <- mapply(data$steps,fill_na,a=data$steps,b=data$meanSteps)
d <- mapply(fill_na,data$steps,MoreArgs = list(data$steps,data$meanSteps))
fill_na <- function(a,b){
if(is.na(a))
b
else
a
}
for (i in nrows(data)) {
data$steps[i] <- fill_na(data$steps[i],data$meanSteps[i])
}
for (i in nrow(data)) {
data$steps[i] <- fill_na(data$steps[i],data$meanSteps[i])
}
sum(is.na(data$steps))
View(data)
fill_na <- function(a,b){
if(is.na(a))
b
else
a
}
fill_na <- function(a,b){
if(is.na(a))
b
if (is.na(b))
0
else
a
}
for (i in nrow(data)) {
data$steps[i] <- fill_na(data$steps[i],data$meanSteps[i])
}
sum(is.na(data$steps))
data$steps[0]
data$steps[1]
data$steps[2]
data$steps[2]
data$meanSteps[2]
fill_na(data$steps[2],data$meanSteps[2])
fill_na <- function(a,b){
if(is.na(a))
return(b)
if (is.na(b))
return(0)
else
return(a)
}
for (i in nrow(data)) {
data$steps[i] <- fill_na(data$steps[i],data$meanSteps[i])
}
sum(is.na(data$steps))
View(data)
fill_na <- function(a,b){
if(is.na(a))
return(b)
if (is.na(b))
return(0)
else
return(a)
}
for (i in 1:nrow(data)) {
data$steps[i] <- fill_na(data$steps[i],data$meanSteps[i])
}
sum(is.na(data$steps))
sum(is.na(data$steps))
for (i in nrow(data)) {
i
}
for (i in nrow(data)) {
print(i)
}
for (i in 1:nrow(data)) {
print(i)
}
fill_na <- function(a,b){
if(is.na(a))
return(b)
if (is.na(b))
return(0)
else
return(a)
}
for (i in 1:nrow(data)) {
data$steps[i] <- fill_na(data$steps[i],data$meanSteps[i])
}
sum(is.na(data$steps))
for (i in 1:nrow(data)) {
data[i,]$steps <- fill_na(data[i,]$steps,data[i,]$meanSteps)
}
sum(is.na(data$steps))
summary(data)
fill_na <- function(a,b){
if (is.na(b))
return(0)
else if(is.na(a))
return(b)
else
return(a)
}
for (i in 1:nrow(data)) {
data$steps[i] <- fill_na(data$steps[i],data$meanSteps[i])
}
summary(data)
View(data)
data <- read.csv("activity.csv")
sum(is.na(data$steps))
meanSteps <- aggregate(data$steps,by=list(data$interval),mean,na.rm=T)
names(meanSteps) <- c("date", "meanSteps")
data <- merge(data,meanSteps,by="date")
View(data)
data <- read.csv("activity.csv")
meanSteps <- aggregate(data$steps,by=list(data$interval),mean,na.rm=T)
names(meanSteps) <- c("interval", "meanSteps")
data <- merge(data,meanSteps,by="interval")
View(data)
sapply(data$steps, fill_na,data$steps,data$meanSteps)
for (i in 1:nrow(data)) {
data$steps[i] <- fill_na(data$steps[i],data$meanSteps[i])
}
View(data)
View(fill_na)
?weekdays
weekdays(data$date)
weekdays(as.Date(data$date))
data$day = ifelse(as.POSIXlt(as.Date(date$date))$wday%%6 ==
0, "weekend", "weekday")
as.POSIXlt(as.Date(date$date)
)
(as.Date(date$date))$wday
(as.Date(date$date))
data$day = ifelse(as.POSIXlt(as.Date(data$date))$wday%%6 ==
0, "weekend", "weekday")
View(data)
library(ggplot2)
qplot(interval,meanSteps,data=data,facets = day)
qplot(interval,meanSteps,data=data,facets = data$day)
qplot(interval,meanSteps,data=data,facets = "day")
qplot(interval,meanSteps,data=data,facets = "day",type='l')
plot(steps ~ interval | factor(day), data = stepsInterval2, aspect = 1/2,
type = "l")
plot(steps ~ interval | factor(day), data = data, aspect = 1/2,
type = "l")
xyplot(steps ~ interval | factor(day), data = data, aspect = 1/2,
type = "l")
library(lattice)
xyplot(steps ~ interval | factor(day), data = data, aspect = 1/2,
type = "l")
xyplot(meanSteps ~ interval | factor(day), data = data, aspect = 1/2,
type = "l")
stepsInterval2 = aggregate(steps ~ interval + day, activityFilled, mean)
stepsInterval2 = aggregate(steps ~ interval + day, data, mean)
xyplot(steps ~ interval | factor(day), data = stepsInterval2, aspect = 1/2,
type = "l")
